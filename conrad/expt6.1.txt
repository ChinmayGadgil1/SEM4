section .data
    msg1 db "Enter the number of terms: ", 0
    len1 equ $ - msg1
    newline db 0xA
    space db " "

section .bss
    num resb 2
    fib1 resd 1
    fib2 resd 1
    temp resd 1

section .text
    global _start

_start:
    ; Prompt user to enter number of terms
    mov eax, 4
    mov ebx, 1
    mov ecx, msg1
    mov edx, len1
    int 0x80

    ; Read user input
    mov eax, 3
    mov ebx, 0
    mov ecx, num
    mov edx, 2
    int 0x80

    ; Convert ASCII input to integer
    movzx eax, byte [num]     ; Load first digit
    sub eax, '0'              ; Convert ASCII to integer

    ; Initialize Fibonacci variables
    mov dword [fib1], 0       ; First Fibonacci number = 0
    mov dword [fib2], 1       ; Second Fibonacci number = 1

    ; Print first two Fibonacci numbers
    call print_fib
    call print_fib

    ; Loop to generate Fibonacci sequence
    mov ecx, eax
    sub ecx, 2                ; Since first two terms are printed

next_fib:
    jecxz end_program          ; If ecx == 0, terminate

    ; Calculate next Fibonacci number: temp = fib1 + fib2
    mov eax, dword [fib1]
    add eax, dword [fib2]
    mov dword [temp], eax

    ; Print next Fibonacci number
    call print_fib

    ; Shift values: fib1 = fib2, fib2 = temp
    mov eax, dword [fib2]
    mov dword [fib1], eax

    mov eax, dword [temp]
    mov dword [fib2], eax

    loop next_fib

end_program:
    ; Exit the program
    mov eax, 1
    mov ebx, 0
    int 0x80

print_fib:
    ; Print space
    mov eax, 4
    mov ebx, 1
    mov ecx, space
    mov edx, 1
    int 0x80

    ; Convert integer to ASCII and print
    mov eax, dword [fib1]
    call int_to_ascii
    ret

int_to_ascii:
    ; Convert number in EAX to ASCII and print
    mov ecx, 10
    mov edi, num + 1  ; Point to the buffer (end)
    mov byte [edi], 0 ; Null-terminate string

convert:
    dec edi
    mov edx, 0
    div ecx           ; EAX / 10, remainder in EDX
    add dl, '0'       ; Convert remainder to ASCII
    mov [edi], dl
    test eax, eax
    jnz convert

    ; Print number
    mov eax, 4
    mov ebx, 1
    mov ecx, edi
    mov edx, num + 2 - edi
    int 0x80
    ret